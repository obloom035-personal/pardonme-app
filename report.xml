This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-07-07 18:50:49

# File Summary

## Purpose:

This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format:

The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
   a. A header with the file path (## File: path/to/file)
   b. The full contents of the file in a code block

## Usage Guidelines:

- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

## Notes:

- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

## Additional Information:

For more information about Repomix, visit: https://github.com/andersonby/python-repomix


# Repository Structure

```
Google Maps API Key.txt
PardonMe_App_v1
  app.py
  logs
    section_one.json
  static
    styles.css
    styles_section_one.css
    styles_section_two.css
  templates
    home.html
    section_one.html
    section_two.html
```

# Repository Files


## Google Maps API Key.txt

```text
AIzaSyC7n5UZkma43GNrl4rgElaQVcDIorrXShg
```

## PardonMe_App_v1/app.py

```python
from flask import Flask, render_template, request, redirect, session
import json
import os

app = Flask(__name__)
app.secret_key = os.environ.get("APP_SECRET_KEY", "dev-placeholder")

@app.route('/')
def home():
    session.clear()  # Clear session to start fresh
    return render_template('home.html')
    
@app.route("/section_one", methods=["GET", "POST"])
def section_one():
    if request.method == "POST":
        # Get form data
        data = {
            "first_name": request.form.get("first_name"),
            "middle_name": request.form.get("middle_name"),
            "last_name": request.form.get("last_name"),
            "email": request.form.get("email"),
            "work_phone": request.form.get("work_phone"),
            "birth_place": request.form.get("birth_place"),
            "ssn": request.form.get("ssn"),
            "home_address": request.form.get("home_address"),
            "home_apartment": request.form.get("home_apartment"),
            "alias_names": request.form.get("alias_names"),
            "dob": request.form.get("dob"),
            "home_phone": request.form.get("home_phone"),
            "cell_phone": request.form.get("cell_phone"),
            "gender": request.form.get("gender"),
            "ethnicity": request.form.get("ethnicity"),
            "mailing_address": request.form.get("mailing_address"),
            "mailing_apartment": request.form.get("mailing_apartment"),
            "alias_dates": request.form.get("alias_dates"),
        }

        # Save to session
        session['section_one'] = data

        # Also write to JSON file
        os.makedirs("logs", exist_ok=True)
        with open("logs/section_one.json", "w") as f:
            json.dump(data, f, indent=2)

        return redirect("/section_two")

    # Render Section 1 page
    current_section = 1
    total_sections = 7
    progress = int(((current_section - 1) / total_sections) * 100)
    return render_template("section_one.html", progress=progress)
    
@app.route("/section_two", methods=["GET", "POST"])
def section_two():
    if request.method == "POST":
        # Placeholder for future section_two form handling
        data = {
            "example_field": request.form.get("example_field")
        }

        # Save to session (replace 'example_field' with real ones later)
        session['section_two'] = data

        # Also write to JSON file
        os.makedirs("logs", exist_ok=True)
        with open("logs/section_two.json", "w") as f:
            json.dump(data, f, indent=2)

        return redirect("/section_three")  # Or back to /section_two if not built yet

    # Render Section 2 page
    current_section = 2
    total_sections = 7
    progress = int(((current_section - 1) / total_sections) * 100)
    return render_template("section_two.html", progress=progress, current_section=2)  

if __name__ == '__main__':
    app.run(debug=True)
```

## PardonMe_App_v1/logs/section_one.json

```json
{
  "first_name": "Oren",
  "middle_name": "Lee Marshall",
  "last_name": "Bloom",
  "email": "obloom035@gmail.com",
  "work_phone": "2622321185",
  "birth_place": "Greenfield",
  "ssn": "123-45-6789",
  "home_address": "3500 S Glen Park Rd, New Berlin, WI 53151, USA",
  "home_apartment": "Apt.2",
  "alias_names": "",
  "dob": "1990-02-08",
  "home_phone": "262-232-1185",
  "cell_phone": "262-232-1185",
  "gender": "Male",
  "ethnicity": "Two or more races",
  "mailing_address": "3500 S Glen Park Rd, New Berlin, WI 53151, USA",
  "mailing_apartment": "Apt.2",
  "alias_dates": ""
}
```

## PardonMe_App_v1/static/styles.css

```css
body {
    background-color: #0a1f2e;
    color: #fff;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    overflow: hidden;
}

/* --- LOGO ANIMATION --- */
.logo-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(1.5);
    opacity: 0;
    animation: fadeInLogo 1.5s ease-out forwards;
    transition: top 1.2s ease, left 1.2s ease, transform 1.2s ease;
}

.logo-container.moved {
    top: 30px;
    left: 30px;
    transform: scale(0.5);
}

@keyframes fadeInLogo {
    from { opacity: 0; }
    to { opacity: 1; }
}

/* --- TITLE ANIMATION --- */
.page-title {
    position: absolute;
    top: var(--title-top, 180px);
    left: 50%;
    transform: translateX(-50%);
    font-size: 2.8rem;
    font-weight: bold;
    text-align: center;
    white-space: nowrap;
    opacity: 0;
    animation: titleFadeIn 1.2s ease-in forwards;
    animation-delay: 2.5s;
}

@keyframes titleFadeIn {
    from {
        opacity: 0;
        transform: translateX(-50%) translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateX(-50%) translateY(0);
    }
}

/* --- CENTERED TEXT + BUTTON BLOCK --- */
.centered-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 850px;
    text-align: center;
}

.typing-container {
    margin-bottom: 30px;
}

.typing-text {
    display: inline-block;
    white-space: pre-wrap;
    font-family: 'Segoe UI', Tahoma, sans-serif;
    font-size: 1.5rem;
    line-height: 1.8;
    color: #ffffff;
    padding: 20px;
    border-radius: 10px;
    border-right: 2px solid white;
    animation: blinkCaret 0.75s step-end infinite;
    background-color: rgba(255, 255, 255, 0.05);
    box-shadow: 0 0 20px rgba(0, 255, 200, 0.3);
}

.typing-complete {
    border-right: none;
    font-family: 'Segoe UI', Tahoma, sans-serif;
    font-size: 1.5rem;
    line-height: 1.8;
}

@keyframes blinkCaret {
    0%, 100% { border-color: transparent; }
    50% { border-color: white; }
}

/* --- BOTTOM CONTENT --- */
#bottomContent {
    opacity: 0;
    transition: opacity 1s ease-in-out;
}

.fade-in {
    display: block;
    animation: contentFadeIn 1.5s ease-in forwards;
}

@keyframes contentFadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to   { opacity: 1; transform: translateY(0); }
}

.hidden {
    display: none;
}

.subtext {
    font-size: 14px;
    color: #cfd8dc;
    margin-bottom: 12px;
}

.start-btn {
    display: inline-block;
    padding: 20px 40px; /* Double the original size */
    font-size: 1.4rem;   /* Bigger text */
    background-color: #00cc66;
    color: white;
    text-decoration: none;
    font-weight: bold;
    border-radius: 8px;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 0 20px #00cc66, 0 0 40px #00cc66, 0 0 60px #00cc66;
    animation: pulseGlow 2s infinite;
}

.start-btn:hover {
    background-color: #00e673;
    box-shadow: 0 0 25px #00ff88, 0 0 50px #00ff88, 0 0 75px #00ff88;
	transform: scale(1.05);
}

/* Optional: subtle pulsing animation */
@keyframes pulseGlow {
    0%, 100% {
        box-shadow: 0 0 20px #00cc66, 0 0 40px #00cc66, 0 0 60px #00cc66;
    }
    50% {
        box-shadow: 0 0 30px #00ff88, 0 0 60px #00ff88, 0 0 90px #00ff88;
    }
}
```

## PardonMe_App_v1/static/styles_section_one.css

```css
body {
  margin: 0;
  font-family: 'Segoe UI', sans-serif;
  background-color: #f2f6f9;
  color: #333;
}

/* --- Top Bar --- */
.top-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #0a1f2e;
  color: white;
  padding: 20px 30px;
  border-bottom: 3px solid #00cc66;
}

.logo-title {
  flex-shrink: 0;
}

.logo-img {
  height: 150px; /* Slightly smaller for balance */
}

.title-center {
  text-align: center;
  flex-grow: 1;
}

.title-center h1 {
  margin: 0;
  font-size: 1.8rem;
}

.title-center .section-title {
  margin: 5px 0;
  font-size: 1.2rem;
}

.title-center .section-description {
  margin-bottom: 10px;
  font-size: 0.95rem;
  color: #cfd8dc;
}

.progress-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.progress-bar {
  width: 200px;
  height: 10px;
  background-color: #ccc;
  border-radius: 5px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background-color: #00cc66;
}

/* --- Arrows --- */
.nav-arrows {
  flex-shrink: 0;
}

.nav-arrows .nav-btn {
  background-color: #00cc66;
  border: none;
  padding: 10px 15px;
  font-weight: bold;
  border-radius: 5px;
  color: #fff;
  cursor: pointer;
  margin-left: 10px;
}

.nav-btn:hover {
  background-color: #00e673;
}

/* --- Layout --- */
.page-layout {
  display: flex;
  height: calc(100vh - 120px);
}

.sidebar {
  background-color: #112d3e;
  color: white;
  padding: 20px;
  width: 220px;
}

.sidebar-item {
  padding: 12px;
  margin-bottom: 8px;
  border-radius: 6px;
  background-color: #1b3f53;
  cursor: pointer;
}

.sidebar-item.active {
  background-color: #00cc66;
  color: #000;
  font-weight: bold;
  animation: pulse-glow 1.8s ease-in-out infinite;
}

/* --- Sidebar Header --- */
.sidebar-title {
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 20px;
  color: #ffffff;
}

@keyframes pulse-glow {
  0% {
    box-shadow: 0 0 10px rgba(0, 255, 102, 0.6), 0 0 20px rgba(0, 255, 102, 0.4);
  }
  50% {
    box-shadow: 0 0 20px rgba(0, 255, 102, 0.9), 0 0 40px rgba(0, 255, 102, 0.6);
  }
  100% {
    box-shadow: 0 0 10px rgba(0, 255, 102, 0.6), 0 0 20px rgba(0, 255, 102, 0.4);
  }
}

/* --- Main Content --- */
.main-content {
  flex-grow: 1;
  padding: 30px;
}

.form-card {
  background-color: white;
  border-radius: 12px;
  padding: 30px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.form-grid {
  display: flex;
  gap: 40px;
  flex-wrap: wrap;
}

.form-column {
  flex: 1;
  min-width: 300px;
}

input[type="text"],
input[type="email"],
input[type="tel"],
input[type="date"],
textarea {
  width: 100%;
  padding: 12px;
  font-size: 16px;
  border-radius: 6px;
  border: 1px solid #ccc;
  box-sizing: border-box;
}

input:invalid,
textarea:invalid {
  border-color: red;
  box-shadow: 0 0 5px rgba(255, 0, 0, 0.5);
}

textarea {
  min-height: 100px;
  resize: vertical;
}

label {
  font-weight: bold;
  margin-bottom: 6px;
  display: inline-block;
}

.start-btn {
  background-color: #00cc66;
  color: white;
  padding: 14px 26px;
  font-size: 16px;
  font-weight: bold;
  border: none;
  border-radius: 8px;
  box-shadow: 0 6px 16px rgba(0, 204, 102, 0.4);
  cursor: pointer;
  transition: all 0.3s ease;
}

.start-btn:hover {
  background-color: #00e673;
  box-shadow: 0 8px 24px rgba(0, 255, 140, 0.6);
  transform: translateY(-2px);
}

.ssn-input {
  width: 100%;
  flex: 1;
  min-width: 0;
}

.ssn-btn {
  background-color: transparent;
  border: none;
  cursor: pointer;
  padding: 4px;
}

.ssn-btn img {
  transition: transform 0.2s ease;
}

.ssn-btn:hover img {
  transform: scale(1.2);
}

.ssn-container {
  display: flex;
  align-items: center;
  gap: 10px;
  width: 100%;
}

#ssn {
  height: 48px;
  padding: 10px;
  font-size: 18px;
  box-sizing: border-box;
}

select {
  width: 100%;
  padding: 12px;
  font-size: 16px;
  border-radius: 6px;
  border: 1px solid #ccc;
  box-sizing: border-box;
  background-color: #fff;
  appearance: none;
}

select:focus {
  outline: none;
  border-color: #00cc66;
  box-shadow: 0 0 3px rgba(0, 204, 102, 0.5);
}
```

## PardonMe_App_v1/static/styles_section_two.css

```css
body {
  margin: 0;
  font-family: 'Segoe UI', sans-serif;
  background-color: #f2f6f9;
  color: #333;
}

/* --- Top Bar --- */
.top-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #0a1f2e;
  color: white;
  padding: 20px 30px;
  border-bottom: 3px solid #00cc66;
}

.logo-title {
  flex-shrink: 0;
}

.logo-img {
  height: 150px;
}

.title-center {
  text-align: center;
  flex-grow: 1;
}

.title-center h1 {
  margin: 0;
  font-size: 1.8rem;
}

.title-center .section-title {
  margin: 5px 0;
  font-size: 1.2rem;
}

.title-center .section-description {
  margin-bottom: 10px;
  font-size: 0.95rem;
  color: #cfd8dc;
}

.progress-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.progress-bar {
  width: 200px;
  height: 10px;
  background-color: #ccc;
  border-radius: 5px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background-color: #00cc66;
}

/* --- Navigation Buttons --- */
.nav-arrows {
  flex-shrink: 0;
}

.nav-arrows .nav-btn {
  background-color: #00cc66;
  border: none;
  padding: 10px 15px;
  font-weight: bold;
  border-radius: 5px;
  color: #fff;
  cursor: pointer;
  margin-left: 10px;
}

.nav-btn:hover {
  background-color: #00e673;
}

/* --- Layout --- */
.page-layout {
  display: flex;
  height: calc(100vh - 120px);
}

.sidebar {
  background-color: #112d3e;
  color: white;
  padding: 20px;
  width: 220px;
}

.sidebar-item {
  padding: 12px;
  margin-bottom: 8px;
  border-radius: 6px;
  background-color: #1b3f53;
  cursor: pointer;
}

.sidebar-item.active {
  background-color: #00cc66;
  color: #000;
  font-weight: bold;
  animation: pulse-glow 1.8s ease-in-out infinite;
}

.sidebar-item.completed {
  background-color: #00cc66;
  color: #000;
  font-weight: bold;
}

.sidebar-title {
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 20px;
  color: #ffffff;
}

@keyframes pulse-glow {
  0% {
    box-shadow: 0 0 10px rgba(0, 255, 102, 0.6), 0 0 20px rgba(0, 255, 102, 0.4);
  }
  50% {
    box-shadow: 0 0 20px rgba(0, 255, 102, 0.9), 0 0 40px rgba(0, 255, 102, 0.6);
  }
  100% {
    box-shadow: 0 0 10px rgba(0, 255, 102, 0.6), 0 0 20px rgba(0, 255, 102, 0.4);
  }
}

/* --- Main Content --- */
.main-content {
  flex-grow: 1;
  padding: 30px;
}

/* --- Buttons --- */
.start-btn {
  background-color: #00cc66;
  color: white;
  padding: 14px 26px;
  font-size: 16px;
  font-weight: bold;
  border: none;
  border-radius: 8px;
  box-shadow: 0 6px 16px rgba(0, 204, 102, 0.4);
  cursor: pointer;
  transition: all 0.3s ease;
}

.start-btn:hover {
  background-color: #00e673;
  box-shadow: 0 8px 24px rgba(0, 255, 140, 0.6);
  transform: translateY(-2px);
}

.form-card {
  max-width: 800px;
  margin: auto;
  padding: 40px;
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0,0,0,0.08);
}

form label {
  display: block;
  margin-top: 15px;
  font-weight: 600;
  font-size: 0.95rem;
}

form input[type="text"],
form input[type="date"],
form select,
form textarea {
  width: 100%;
  padding: 8px 10px;
  margin-top: 5px;
  font-size: 0.95rem;
  border: 1px solid #ccc;
  border-radius: 6px;
  box-sizing: border-box;
}

form fieldset {
  border: 1px solid #ccc;
  padding: 20px;
  border-radius: 8px;
  margin-top: 25px;
}

form fieldset legend {
  font-weight: bold;
  font-size: 1.1rem;
  padding: 0 10px;
}

form hr {
  margin: 30px 0;
}

form button[type="submit"] {
  background-color: #1e90ff;
  color: white;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  margin-top: 30px;
}

form button:hover {
  background-color: #0075d4;
}

/* Ensure sidebar extends to full height of viewport */
html, body {
  height: 100%;
}

.page-layout {
  min-height: 100vh;
  align-items: flex-start;
}

/* Fix sidebar height */
.sidebar {
  height: 100%;
  flex-shrink: 0;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

/* Offense card UI */
.offense-card {
  padding: 25px;
  margin-bottom: 30px;
  background-color: #f9f9f9;
  border: 1px solid #ccc;
  border-radius: 10px;
}

.offense-card.completed {
  border-color: green;
  background-color: #e6ffee;
}

.offense-card h4 {
  margin-top: 0;
  font-size: 1.2rem;
  color: #0a1f2e;
}

/* Help button next to upload */
.help-btn {
  margin-left: 8px;
  background: #1e90ff;
  color: white;
  border: none;
  padding: 2px 8px;
  border-radius: 6px;
  font-size: 0.85rem;
  cursor: pointer;
  vertical-align: middle;
}

.help-btn:hover {
  background: #0073cc;
}

/* Upload section */
.doc-upload-section {
  background-color: #f1f5f9;
  padding: 15px;
  border: 1px dashed #aaa;
  border-radius: 8px;
  margin-top: 20px;
}

/* Add Another Offense Button */
#add-offense-wrapper button {
  margin-top: 15px;
  background-color: #00cc66;
  color: white;
  padding: 10px 20px;
  font-size: 0.95rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

#add-offense-wrapper button:hover {
  background-color: #00b359;
}
```

## PardonMe_App_v1/templates/home.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>PardonMe, Inc.</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
  <!-- Logo -->
  <div class="logo-container">
    <img src="{{ url_for('static', filename='logo.png') }}" alt="PardonMe Logo" width="400">
  </div>

  <!-- Title -->
  <h1 class="page-title">PardonMe, Inc. – AI-Powered Application Assistant</h1>

  <!-- Centered Content: Typing + Final Content -->
  <div class="centered-content">
    <div class="typing-container">
      <pre class="typing-text" id="typingText"></pre>
    </div>

    <div class="bottom-content hidden" id="bottomContent">
      <p class="subtext">Helping Wisconsinites reclaim their future, one pardon at a time.</p>
      <a href="/section_one" class="start-btn">Start Application</a>
    </div>
  </div>

  <!-- Animation Script -->
	<script>
	  window.onload = () => {
		const logo = document.querySelector('.logo-container');
		const typingText = document.getElementById('typingText');
		const bottomContent = document.getElementById('bottomContent');

		const message = `PardonMe, Inc. is a nonprofit organization dedicated to helping Wisconsinites with felony records reclaim their future.
		
	Our mission is to make the pardon application process clear, accessible, and achievable for everyone — no lawyer required.
	
	With the help of AI, this assistant will guide you through each step of the process, answer questions in plain language, 
	and ensure your application is complete and ready for review.`;

		// Step 1: Move the logo
		setTimeout(() => {
		  logo.classList.add('moved');
		}, 1600);

		// Step 2: Start typing after logo settles
		setTimeout(() => {
		  let i = 0;
		  const interval = setInterval(() => {
			typingText.textContent += message.charAt(i);
			i++;
			if (i === message.length) {
			  clearInterval(interval);

			  // Step 3: Transform into styled text block
			  typingText.classList.add('typing-complete');

			  // Step 4: Reveal bottom content shortly after
			  setTimeout(() => {
				bottomContent.classList.remove('hidden');
				bottomContent.classList.add('fade-in');
			  }, 300);
			}
		  }, 25);
		}, 3000);
	  };
	</script>
</body>
</html>
```

## PardonMe_App_v1/templates/section_one.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Section One – PardonMe Application</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='styles_section_one.css') }}">
</head>
<body>
  <!-- Top Bar -->
  <div class="top-bar">
    <div class="logo-title">
      <img src="{{ url_for('static', filename='logo.png') }}" alt="Logo" class="logo-img">
    </div>
    <div class="title-center">
      <h1 class="main-title">PardonMe, Inc.</h1>
      <h2 class="section-title">Section 1 – Personal Information</h2>
      <p class="section-description">Tell us who you are to begin your journey.</p>
      <div class="progress-wrapper">
        <span>Progress:</span>
        <div class="progress-bar">
          <div class="progress-fill" style="width: {{ progress }}%;"></div>
        </div>
        <span>{{ progress }}%</span>
      </div>
    </div>
	
	<!-- add back in later maybe
    <div class="nav-arrows">
      <a href="/section_one" class="nav-btn">← Back</a>
      <button class="nav-btn">Next →</button>
    </div>	-->
  </div>
	
  <!-- Page Layout -->
  <div class="page-layout">
    <!-- Sidebar -->
    <div class="sidebar">
      <h3 class="sidebar-title">📝 To Do List</h3>
      {% set section_names = [
        'Personal Information',
        'Offense Details',
        'Sentence & Incarceration',
        'Employment & Education',
        'Community Involvement',
        'Character References',
        'Statement & Signature'
      ] %}
      {% for i in range(1, 8) %}
        <div class="sidebar-item {% if i == 1 %}active{% endif %}">
          <strong>Section {{ i }}</strong>
          <p>{{ section_names[i-1] }}</p>
        </div>
      {% endfor %}
    </div>

    <!-- Main Content -->
	<div class="main-content">
	  <div class="form-card">
		<form method="post" id="form-section-one" novalidate>
		  <div class="form-grid">
			<!-- Column 1 -->
			<div class="form-column">
			  <label for="first_name">First Name</label>
			  <input type="text" id="first_name" name="first_name" required><br><br>

			  <label for="middle_name">Middle Name</label>
			  <input type="text" id="middle_name" name="middle_name"><br><br>

			  <label for="last_name">Last Name</label>
			  <input type="text" id="last_name" name="last_name" required><br><br>

			  <label for="email">Email Address</label>
			  <input type="email" id="email" name="email"><br><br>

			  <label for="work_phone">Work Phone</label>
			  <input type="tel" id="work_phone" name="work_phone"><br><br>

			  <label for="birth_place">Place of Birth (City, State)</label>
			  <input type="text" id="birth_place" name="birth_place"><br><br>

			  <label for="ssn">Social Security Number</label>
				<div class="ssn-container">
				  <input 
					type="text" 
					id="ssn" 
					name="ssn" 
					class="ssn-input" 
					maxlength="11" 
					inputmode="numeric" 
					required 
					oninput="formatSSN()"
				  >
				  <button type="button" id="toggleSSN" class="ssn-btn">
					<img src="https://cdn-icons-png.flaticon.com/512/159/159604.png" alt="Show SSN" style="height: 24px;">
				  </button>
				</div><br><br>

			  <label for="home_address">Home Address</label>
			  <input type="text" id="home_address" name="home_address" required><br><br>

			  <label for="home_apartment">Apt / Unit # (optional)</label>
			  <input type="text" id="home_apartment" name="home_apartment"><br><br>

			  <label for="alias_names">Maiden / Alias / Former Name(s)</label>
			  <input type="text" id="alias_names" name="alias_names"><br><br>
			</div>

			<!-- Column 2 -->
			<div class="form-column">
			  <label for="dob">Date of Birth</label>
			  <input type="date" id="dob" name="dob" required><br><br>

			  <label for="home_phone">Home Phone</label>
			  <input type="tel" id="home_phone" name="home_phone" required><br><br>

			  <label for="cell_phone">Cell Phone</label><br>
			  <input type="tel" id="cell_phone" name="cell_phone"><br>
			  <label>
				<input type="checkbox" id="copyPhoneCheckbox" onclick="copyPhone()"> Same as home phone
			  </label><br><br>

			  <label for="gender">Gender (optional)</label>
			  <select id="gender" name="gender">
				<option value="" selected disabled>Select Gender</option>
				<option value="Female">Female</option>
				<option value="Male">Male</option>
				<option value="Non-Binary">Non-Binary</option>
				<option value="Prefer not to say">Prefer not to say</option>
				<option value="Other">Other</option>
			  </select><br><br>

			  <label for="ethnicity">Race or Ethnicity (optional)</label>
			  <select id="ethnicity" name="ethnicity">
				<option value="" selected disabled>Select Ethnicity</option>
				<option value="White">White</option>
				<option value="Black or African American">Black or African American</option>
				<option value="Hispanic or Latino">Hispanic or Latino</option>
				<option value="Asian">Asian</option>
				<option value="Native American or Alaska Native">Native American or Alaska Native</option>
				<option value="Native Hawaiian or Pacific Islander">Native Hawaiian or Pacific Islander</option>
				<option value="Two or more races">Two or more races</option>
				<option value="Prefer not to say">Prefer not to say</option>
			  </select><br><br>

			  <label>
				<input type="checkbox" id="copyAddressCheckbox" onclick="copyAddress()"> Mailing address is the same as home address
			  </label><br><br>

			  <label for="mailing_address">Mailing Address</label>
			  <input type="text" id="mailing_address" name="mailing_address" required><br><br>

			  <label for="mailing_apartment">Apt / Unit # (optional)</label>
			  <input type="text" id="mailing_apartment" name="mailing_apartment"><br><br>

			  <label for="alias_dates">Dates Used (MM/YY – MM/YY)</label>
			  <input type="text" id="alias_dates" name="alias_dates"><br><br>
			</div>
		  </div>

		  <div style="text-align:center; margin-top: 20px;">
			<button type="submit" class="start-btn">Continue to Section Two</button>
		  </div>
		</form>
	  </div>
	</div>
  </div>

  <!-- Google Places -->
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC7n5UZkma43GNrl4rgElaQVcDIorrXShg&libraries=places&callback=initAutocomplete" async defer></script>

	<script>
	  document.addEventListener('DOMContentLoaded', () => {
		initAutocomplete();

		// Prevent Enter key from unintentionally submitting the form
		document.getElementById("form-section-one").addEventListener("keydown", function (e) {
		  if (e.key === "Enter" && e.target.tagName !== "TEXTAREA") {
			e.preventDefault();
		  }
		});

		// SSN toggle
		const ssnInput = document.getElementById('ssn');
		const toggleBtn = document.getElementById('toggleSSN');

		ssnInput.type = 'password';

		toggleBtn.addEventListener('mousedown', () => {
		  ssnInput.type = 'text';
		});

		toggleBtn.addEventListener('mouseup', () => {
		  ssnInput.type = 'password';
		});

		toggleBtn.addEventListener('mouseleave', () => {
		  ssnInput.type = 'password';
		});

		// Auto-format SSN
		ssnInput.addEventListener('input', () => {
		  let raw = ssnInput.value.replace(/\D/g, "").slice(0, 9);
		  let formatted = raw;
		  if (raw.length > 5) {
			formatted = `${raw.slice(0, 3)}-${raw.slice(3, 5)}-${raw.slice(5)}`;
		  } else if (raw.length > 3) {
			formatted = `${raw.slice(0, 3)}-${raw.slice(3)}`;
		  }
		  ssnInput.value = formatted;
		});

		// Validation
		document.getElementById("form-section-one").addEventListener("submit", function (e) {
		  let isValid = true;
		  document.querySelectorAll(".error-msg").forEach(el => el.remove());

		  function markInvalid(id, message) {
			isValid = false;
			const input = document.getElementById(id);
			const error = document.createElement("div");
			error.className = "error-msg";
			error.style.color = "red";
			error.style.fontSize = "0.85rem";
			error.textContent = message;
			input.parentNode.insertBefore(error, input.nextSibling);
			input.scrollIntoView({ behavior: "smooth", block: "center" });
		  }

		  if (!document.getElementById("first_name").value.trim()) markInvalid("first_name", "First name is required.");
		  if (!document.getElementById("last_name").value.trim()) markInvalid("last_name", "Last name is required.");
		  if (!document.getElementById("dob").value.trim()) markInvalid("dob", "Date of birth is required.");

		  const ssnVal = document.getElementById("ssn").value.trim();
		  if (!/^\d{3}-\d{2}-\d{4}$/.test(ssnVal)) {
			markInvalid("ssn", "Social Security Number must be in the format XXX-XX-XXXX.");
		  }

		  if (!document.getElementById("home_address").value.trim()) markInvalid("home_address", "Home address is required.");

		  if (!isValid) e.preventDefault();
		});

		// Copy phone
		document.getElementById("copyPhoneCheckbox").addEventListener("change", function () {
		  const homePhone = document.getElementById("home_phone").value;
		  document.getElementById("cell_phone").value = this.checked ? homePhone : "";
		});

		// Copy address
		document.getElementById("copyAddressCheckbox").addEventListener("change", function () {
		  const homeAddr = document.getElementById("home_address").value;
		  const apt = document.getElementById("home_apartment").value;
		  document.getElementById("mailing_address").value = this.checked ? homeAddr : "";
		  document.getElementById("mailing_apartment").value = this.checked ? apt : "";
		});
	  });

	  function initAutocomplete() {
		const homeInput = document.getElementById('home_address');
		const mailingInput = document.getElementById('mailing_address');

		if (homeInput) {
		  const homeAutocomplete = new google.maps.places.Autocomplete(homeInput, {
			types: ['address'],
			componentRestrictions: { country: "us" },
			fields: ['formatted_address']
		  });
		  homeAutocomplete.addListener("place_changed", () => {
			const place = homeAutocomplete.getPlace();
			if (place && place.formatted_address) {
			  homeInput.value = place.formatted_address;
			}
		  });
		}

		if (mailingInput) {
		  const mailingAutocomplete = new google.maps.places.Autocomplete(mailingInput, {
			types: ['address'],
			componentRestrictions: { country: "us" },
			fields: ['formatted_address']
		  });
		  mailingAutocomplete.addListener("place_changed", () => {
			const place = mailingAutocomplete.getPlace();
			if (place && place.formatted_address) {
			  mailingInput.value = place.formatted_address;
			}
		  });
		}
	  }
	</script>

</body>
</html>
```

## PardonMe_App_v1/templates/section_two.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Section Two – PardonMe Application</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='styles_section_two.css') }}">
</head>
<body>
  <!-- Top Bar -->
  <div class="top-bar">
    <div class="logo-title">
      <img src="{{ url_for('static', filename='logo.png') }}" alt="Logo" class="logo-img">
    </div>
    <div class="title-center">
      <h1 class="main-title">PardonMe, Inc.</h1>
      <h2 class="section-title">Section 2 – Offense Details</h2>
      <p class="section-description">Tell us about the offense(s) you’re seeking a pardon for.</p>
      <div class="progress-wrapper">
        <span>Progress:</span>
        <div class="progress-bar">
          <div class="progress-fill" style="width: {{ progress }}%;"></div>
        </div>
        <span>{{ progress }}%</span>
      </div>
    </div>
  </div>

  <!-- Page Layout -->
  <div class="page-layout">
    <!-- Sidebar -->
    <div class="sidebar">
      <h3 class="sidebar-title">📝 To Do List</h3>
      {% set section_names = [
        'Personal Information',
        'Offense Details',
        'Sentence & Incarceration',
        'Employment & Education',
        'Community Involvement',
        'Character References',
        'Statement & Signature'
      ] %}
      {% for i in range(1, 8) %}
        <div class="sidebar-item{% if i == current_section %} active{% elif i < current_section %} completed{% endif %}">
          <strong>Section {{ i }}</strong>
          <p>{{ section_names[i-1] }}</p>
        </div>
      {% endfor %}
    </div>

    <!-- Main Content -->
    <div class="main-content">
      <div class="form-card">
        <form method="POST" action="/section2" enctype="multipart/form-data">
          <h3 style="text-align:center;">Offense Details</h3>
          <p style="text-align:center; font-size: 0.9rem; color: #888;">
            You may submit up to three offenses. Complete one offense at a time, including document attachments or confirmation.
          </p>

          <!-- Dynamic Offense Cards -->
          <div id="offense-forms-container"></div>

          <!-- Add Another Offense -->
          <div id="add-offense-wrapper" style="text-align: center; display: none;">
            <button type="button" onclick="addOffense()">+ Add Another Offense</button>
          </div>

          <!-- Continue -->
          <div style="text-align:center; margin-top: 30px;">
            <button type="submit">Save & Continue</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Offense Template -->
  <template id="offense-template">
    <div class="offense-card">
      <h4>Offense #<span class="offense-number"></span></h4>

      <label>Crime:</label>
      <input type="text" name="crime[]" required>

      <label>Court Case Number:</label>
      <input type="text" name="case_number[]">

      <label>County of Conviction:</label>
      <input type="text" name="county[]">

      <label>Date of Offense:</label>
      <input type="date" name="offense_date[]">

      <label>Sentencing Date:</label>
      <input type="date" name="sentencing_date[]">

      <label>Sentence Received (confinement and supervision):</label>
      <textarea name="sentence_received[]" rows="2"></textarea>

      <label>Date Sentence Completed:</label>
      <input type="date" name="sentence_completed[]">

      <label>District Attorney(s) Who Oversaw Conviction:</label>
      <input type="text" name="district_attorney[]">

      <label>Judge(s) Who Presided:</label>
      <input type="text" name="judge[]">

      <!-- Document Upload Step -->
      <div class="doc-upload-section">
        <label>
          Upload Certified Documents
          <button type="button" class="help-btn" onclick="showHelp()">?</button>
        </label>
        <input type="file" name="documents[]" multiple accept=".pdf,.jpg,.png">

        <label style="margin-top:10px;">
          <input type="checkbox" name="sending_physical_docs[]">
          I have paper copies and will mail them separately.
        </label>
      </div>

      <button type="button" class="done-btn" onclick="markOffenseComplete(this)">Done with this offense</button>
      <hr>
    </div>
  </template>

  <script>
    let offenseCount = 0;
    const maxOffenses = 3;

    function addOffense() {
      if (offenseCount >= maxOffenses) return;

      offenseCount++;
      const template = document.getElementById("offense-template");
      const clone = template.content.cloneNode(true);
      clone.querySelector(".offense-number").innerText = offenseCount;

      document.getElementById("offense-forms-container").appendChild(clone);

      if (offenseCount >= maxOffenses) {
        document.getElementById("add-offense-wrapper").style.display = "none";
      }
    }

    function markOffenseComplete(button) {
      const offenseCard = button.closest(".offense-card");
      offenseCard.classList.add("completed");

      if (offenseCount < maxOffenses) {
        document.getElementById("add-offense-wrapper").style.display = "block";
      }
    }

    function showHelp() {
      alert("You must attach certified copies of: (1) the criminal complaint, (2) the information, and (3) the judgment of conviction. These can be obtained from the clerk of courts in the county of conviction. Photocopy and certification fees may apply.");
    }

    // Load first offense on page load
    window.onload = addOffense;
  </script>
</body>
</html>
```

## Statistics

- Total Files: 9
- Total Characters: 34162
- Total Tokens: 0
